stages:
  - build
  - deploy

image: docker:latest

before_script:
  - mkdir -p logs

  - |
    echo "üîê Logging in to GitLab Container Registry..."
    for i in {1..5}; do
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY && break
      echo "Retrying Docker login in 3s..."
      sleep 3
    done

    docker stack rm internship-stack
    sleep 5

# ---------------------- BUILD STAGE ----------------------
build_backend:
  stage: build
  tags: [ec2]
  script:
    - echo "üì¶ Building Docker image..."
    - docker build --target production -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:latest

    - echo "üöÄ Pushing Docker image to registry..."
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# ---------------------- DEPLOY STAGE ----------------------
deploy_backend:
  stage: deploy
  tags: [ec2]
  script:
    - |
      set -ex

      echo "üö¢ Deploying Docker stack..."
      docker stack deploy --with-registry-auth -c docker-compose.yml internship-stack

      echo "üîç Checking if nginx config exists..." | tee -a logs/deploy.log
      ls -la ./nginx/default.conf || (echo "‚ùå Config file missing!" | tee -a logs/deploy.log && exit 1)
      echo "‚úÖ Nginx config file found. Contents:" | tee -a logs/deploy.log

      echo "üîç Checking for port 8080 conflicts on host..." | tee -a logs/deploy.log
      lsof -i :8080 2>&1 | tee -a logs/deploy.log || echo "No processes using port 8080." | tee -a logs/deploy.log
      netstat -tulpn | grep :8080 2>&1 | tee -a logs/deploy.log || echo "No processes using port 8080 (netstat)." | tee -a logs/deploy.log

      echo "üê≥ Checking Docker Swarm status..." | tee -a logs/deploy.log
      until docker info >/dev/null 2>&1; do
        echo "Waiting for Docker daemon..." | tee -a logs/deploy.log
        sleep 2  # Increased sleep for flaky runners
      done

      SWARM_STATE=$(docker info --format '{{.Swarm.LocalNodeState}}')
      if [ "$SWARM_STATE" != "active" ]; then
        ADVERTISE_ADDR=$(hostname -i | awk '{print $1}')
        docker swarm init --advertise-addr $ADVERTISE_ADDR | tee -a logs/deploy.log
      fi

      echo "üö¢ Deploying Docker stack..." | tee -a logs/deploy.log
      docker stack deploy --with-registry-auth -c docker-compose.yml internship-stack | tee -a logs/deploy.log

      echo "üïí Sleeping 10s for initial startup logs..." | tee -a logs/deploy.log
      sleep 10
      docker service logs internship-stack_nginx | tee -a logs/nginx-initial.log || echo "No initial logs yet." | tee -a logs/deploy.log

      echo "‚è≥ Waiting for services to become healthy..." | tee -a logs/deploy.log
      for i in $(seq 1 60); do  # Increased to 60 iterations (~3 min)
        UNHEALTHY=$(docker service ls --format '{{.Name}} {{.Replicas}}' | awk -F'[/ ]' '$2 != $3' || true)  # Added || true for safety
        FAILED_TASKS=$(docker stack ps internship-stack --no-trunc --format '{{.Name}} {{.CurrentState}} {{.Error}}' | grep -iE '(failed|shutdown|rejected)' || true)  # Updated to -iE for reliable pattern matching

        echo "Iteration $i: UNHEALTHY='$UNHEALTHY', FAILED_TASKS='$FAILED_TASKS'" | tee -a logs/deploy.log  # Added for debugging loop progress

        if [ -z "$UNHEALTHY" ] && [ -z "$FAILED_TASKS" ]; then
          echo "‚úÖ All services are running correctly." | tee -a logs/deploy.log
          break
        else
          echo "‚è≥ Unhealthy services or failed tasks found, retrying..." | tee -a logs/deploy.log
          echo "$UNHEALTHY" | tee -a logs/deploy.log
          echo "$FAILED_TASKS" | tee -a logs/deploy.log
          sleep 3
        fi

        if [ "$i" -eq 60 ]; then
          echo "‚ùå Deployment failed: Some services did not start properly." | tee -a logs/deploy.log
          docker service ls | tee -a logs/service-failures.log
          docker stack ps internship-stack --no-trunc | tee -a logs/stack-ps.log
          docker service logs internship-stack_node-app | tee -a logs/node-app.log || echo "No node-app logs available." | tee -a logs/deploy.log
          docker service logs internship-stack_postgres_db | tee -a logs/postgres.log || echo "No postgres logs available." | tee -a logs/deploy.log
          docker service logs internship-stack_rabbitmq | tee -a logs/rabbitmq.log || true
          docker service logs internship-stack_redis | tee -a logs/redis.log || true
          docker service logs internship-stack_nginx | tee -a logs/nginx-failure.log || true
          docker events --since '5m' --filter 'event=service' | tee -a logs/docker-events.log || true
          echo "‚ö†Ô∏è Rolling back: removing stack..." | tee -a logs/deploy.log
          docker stack rm internship-stack | tee -a logs/deploy.log
          exit 1
        fi
      done

      echo "üöÄ Stack deployment successful!" | tee -a logs/deploy.log
      docker service ls | tee -a logs/services.log
      docker stack ps internship-stack --no-trunc | tee -a logs/stack-ps.log

  artifacts:
    when: always
    paths:
      - logs/
    exclude:
      - .env
    expire_in: 3 days
  only:
    - main