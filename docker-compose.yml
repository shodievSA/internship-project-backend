version: '3.8'

services:
  node-app:
    image: ${CI_REGISTRY_IMAGE}:latest
    ports:
      - "3000:3000"
    environment:
      PORT: ${PORT}
      NODE_ENV: ${NODE_ENV}
      BASE_URL: ${BASE_URL}
      FRONTEND_URL: ${FRONTEND_URL}

      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}

      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      RABBITMQ_URL: ${RABBITMQ_URL}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}

      EMAIL: ${EMAIL}
      PASSWORD: ${PASSWORD}

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      OPENAI_API_KEY: ${OPENAI_API_KEY}

    depends_on:
      - postgres_db
      - redis
      - rabbitmq
    deploy:
      replicas: 1 # should be three
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    networks:
      - app-net

  postgres_db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - redisdata:/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    networks:
      - app-net

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - rabbitdata:/var/lib/rabbitmq
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    networks:
      - app-net

  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - /home/ubuntu/smart-desk-pro/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /home/ubuntu/smart-desk-pro/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - /etc/letsencrypt/live/api.smart-desk-pro.xyz/fullchain.pem:/etc/ssl/certs/api.smart-desk-pro.xyz.crt
      - /etc/letsencrypt/live/api.smart-desk-pro.xyz/privkey.pem:/etc/ssl/private/api.smart-desk-pro.xyz.key
    command: /bin/sh -c "sleep 10 && nginx -g 'daemon off;'"
    depends_on:
      - node-app
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    networks:
      - app-net

networks:
  app-net:
    driver: overlay

volumes:
  pgdata:
  redisdata:
  rabbitdata: